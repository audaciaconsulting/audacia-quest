@page "/"

@using System.Drawing
@using Audacia.Quest.Core
@using Audacia.Quest.Core.Events
@using Audacia.Quest.Core.Params
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JsRuntime

@*<img @ref="_fox" hidden src="assets/fox.png" />*@
@if (Initialized)
{
    <Assets Context="_gameContext" OnLoaded="@OnAssetsLoaded" />
}

<div id="canvasContainer" style="background-color: #6495ED; position: fixed; opacity: 1; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    private Canvas2DContext _context;
    private BECanvasComponent _canvas;
    private Game _game;
    private BlazorGameContext _gameContext;

    [Parameter]
    public bool Initialized { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await this._canvas.CreateCanvas2DAsync();

        if (!Initialized)
        {
            await InitGame();
            Initialized = true;
            this.StateHasChanged();
        }
    }

    private async ValueTask InitGame()
    {
        var canvasMeta = await JsRuntime.InvokeAsync<CanvasMeta>("initCanvas", DotNetObjectReference.Create(this));
        _canvas.Height = canvasMeta.Height;
        _canvas.Width = canvasMeta.Width;

        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));

        EventsCollection.Add(EventConstants.RESIZE, new ResizeEvent());
        EventsCollection.Add(EventConstants.KEY_DOWN, new KeyboardEvent());
        EventsCollection.Add(EventConstants.KEY_UP, new KeyboardEvent());
        EventsCollection.Add(EventConstants.MOUSE_DOWN, new MouseEvent());
        EventsCollection.Add(EventConstants.MOUSE_UP, new MouseEvent());

        _gameContext = new BlazorGameContext(_context);
        _game = new Game(_gameContext);

        _game.Init();
        _game.LoadContent();
    }

    protected void OnAssetsLoaded()
    {
        _game.ContentLoaded();
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        _game.Update();

        await _context.ClearRectAsync(0, 0, _canvas.Width, _canvas.Height);

        _game.Draw();
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        EventsCollection.PerformEvent(EventConstants.RESIZE, new ScreenDimensions
            {
                Width = screenWidth,
                Height = screenHeight
            });
    }

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode)
    {
        EventsCollection.PerformEvent(EventConstants.KEY_DOWN, new Keyboard
            {
                KeyCode = keyCode
            });
    }

    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode)
    {
        EventsCollection.PerformEvent(EventConstants.KEY_UP, new Keyboard
            {
                KeyCode = keyCode
            });
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(int mouseButtonCode, int x, int y)
    {
        EventsCollection.PerformEvent(EventConstants.MOUSE_DOWN, new Mouse
            {
                ButtonCode = mouseButtonCode,
                X = x,
                Y = y
            });
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(int mouseButtonCode, int x, int y)
    {
        EventsCollection.PerformEvent(EventConstants.MOUSE_UP, new Mouse
            {
                ButtonCode = mouseButtonCode,
                X = x,
                Y = y
            });
    }

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}