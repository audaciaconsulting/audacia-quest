@page "/"

@using System.Drawing
@using Audacia.Quest.Core
@using Audacia.Quest.Core.Events
@using Audacia.Quest.Core.Params
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JsRuntime

@if (Initialized)
{
    <Assets Context="_gameContext" />
}

<div id="canvasContainer">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    private Canvas2DContext _context;
    private BECanvasComponent _canvas;
    private IGame _game;
    private BlazorGameContext _gameContext;

    private bool _loadContent = true;

    [Parameter]
    public bool Initialized { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await this._canvas.CreateCanvas2DAsync();

        if (!Initialized)
        {
            await InitGame();
            Initialized = true;
        }
    }

    private async ValueTask InitGame()
    {
        var canvasMeta = await JsRuntime.InvokeAsync<CanvasMeta>("initCanvas", DotNetObjectReference.Create(this));
        _canvas.Height = canvasMeta.Height;
        _canvas.Width = canvasMeta.Width;

        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));

        InitializeEvents();

        _gameContext = new BlazorGameContext(_context);
        _game = new Game(_gameContext);

        _game.Init();
    }

    private void InitializeEvents()
    {
        EventsCollection.Add(EventConstants.RESIZE, new ResizeEvent());
        EventsCollection.Add(EventConstants.KEY_DOWN, new KeyboardEvent());
        EventsCollection.Add(EventConstants.KEY_UP, new KeyboardEvent());
        EventsCollection.Add(EventConstants.MOUSE_DOWN, new Audacia.Quest.Core.Events.MouseEvent());
        EventsCollection.Add(EventConstants.MOUSE_UP, new Audacia.Quest.Core.Events.MouseEvent());
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (_game.Update())
        {
            this.StateHasChanged();
            _loadContent = true;
        }

        if (_gameContext.ContentLoaded() && _loadContent)
        {
            _game.ContentLoaded();
            _loadContent = false;
        }

        await _context.ClearRectAsync(0, 0, _canvas.Width, _canvas.Height);

        _game.Draw();
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        EventsCollection.PerformEvent(EventConstants.RESIZE, new ScreenDimensions(screenWidth, screenHeight));
    }

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode)
    {
        EventsCollection.PerformEvent(EventConstants.KEY_DOWN, new Keyboard(keyCode));
    }

    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode)
    {
        EventsCollection.PerformEvent(EventConstants.KEY_UP, new Keyboard(keyCode));
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(int mouseButtonCode, int x, int y)
    {
        EventsCollection.PerformEvent(EventConstants.MOUSE_DOWN, new Mouse(mouseButtonCode, x, y));
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(int mouseButtonCode, int x, int y)
    {
        EventsCollection.PerformEvent(EventConstants.MOUSE_UP, new Mouse(mouseButtonCode, x, y));
    }

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}