@page "/"

@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JsRuntime

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: #6495ED; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    private Canvas2DContext _context;
    protected BECanvasComponent _canvas;

    bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            await InitGame();
            _initialized = true;
        }

        this._context = await this._canvas.CreateCanvas2DAsync();

        //await this._context.ClearColorAsync(0.39f, 0.58f, 0.92f, 1);
        //await this._context.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
    }

    private async ValueTask InitGame()
    {
        var canvasMeta = await JsRuntime.InvokeAsync<CanvasMeta>("initCanvas", DotNetObjectReference.Create(this));

        _canvas.Height = canvasMeta.Height;
        _canvas.Width = canvasMeta.Width;

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
    }

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode)
    {
    }

    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode)
    {
    }

    [JSInvokable]
    public async ValueTask OnMouseDown()
    {
    }

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}